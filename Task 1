#Create a dictionary to store student grades
student_grades = {
    "John": 85,
    "Jane": 90,
    "Bob": 78,
    "Alice": 92
}

# Print the grades for each student
for student, grade in student_grades.items():
    print(f"{student}: {grade}")

# Add a new student to the dictionary
student_grades["Mike"] = 88

# Print the updated list of students and grades
print("\nUpdated Student Grades:")
for student, grade in student_grades.items():
    print(f"{student}: {grade}")

# Remove a student from the dictionary
del student_grades["Bob"]

# Print the updated list of students and grades
print("\nUpdated Student Grades after removal:")
for student, grade in student_grades.items():
    print(f"{student}: {grade}")

# Creating a List
List = []
print("Initial blank List: ")
print(List)

# Addition of Elements in the List
List.append(1)
List.append(2)
List.append(4)
print("\nList after Addition of Three elements: ")
print(List)

# Adding elements to the List using Iterator
for i in range(1, 4):
    List.append(i)
print("\nList after Addition of elements from 1-3: ")
print(List)

# Adding Tuples to the List
List.append((5, 6))
print("\nList after Addition of a Tuple: ")
print(List)

# Addition of List to a List
List2 = ['For', 'Geeks']
List.append(List2)
print("\nList after Addition of a List: ")
print(List)

# Create a tuple
my_tuple = (1, 2, 3, 4, 5)

# Print the tuple
print(my_tuple)

# Access elements of the tuple print(my_tuple[0])  
print(my_tuple[1])  

# Modify a tuple (this will raise an error)
# my_tuple[0] = 10  # TypeError: 'tuple' object does not support item assignment

# Create a tuple with mixed data types
my_tuple = (1, "hello", 3.14, True)

# Print the tuple
print(my_tuple)

# Create a tuple with a single element
my_tuple = (1,)

# Print the tuple
print(my_tuple)

# Create a tuple without parentheses
my_tuple = 1, 2, 3, 4, 5

# Print the tuple
print(my_tuple)

# Unpack a tuple
my_tuple = (1, 2, 3)
a, b, c = my_tuple

# Print the unpacked variables
print(a)  
print(b)  
print(c)
